@Component
public class ValidationUtils {

    @Autowired
    private Validator validator;

    public <T> void validate(T object) {
        Set<ConstraintViolation<T>> violations = validator.validate(object);
        if (!violations.isEmpty()) {
            throw new ConstraintViolationException(violations);
        }
    }
}

public class RoleNameValidator implements ConstraintValidator<ValidRoleName, String> {

    private static final Pattern ROLE_PATTERN = Pattern.compile("^[A-Z]+(?:_[A-Z]+)*$");

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null || value.isBlank()) return false;
        if (value.startsWith("_") || value.endsWith("_")) return false;
        if (value.contains("__")) return false;
        return ROLE_PATTERN.matcher(value).matches();
    }
}

Here’s a professional Jira ticket description for your request:


---

Title:
Backend Endpoint to Retrieve Engine Configuration in JSON Format

Type:
Feature / Backend API

Description:
Develop a backend API endpoint to retrieve engine configuration details in a specific JSON format. The response should include key-value pairs, where the key name (e.g., apix_key) is dynamically derived from the configuration properties stored in the engine configuration database.

Objective:

Expose a clean, structured JSON API for engine configuration retrieval.

Dynamically fetch key names from configuration properties stored in the DB.


Expected Response Format:

{
  "apix_key": "some value"
}

Scope of Work:

Create a GET endpoint (e.g., /api/engine/config).

Fetch the required property key name and its corresponding value from the engine configuration table.

Build and return the JSON response using the key name from the DB.

Ensure proper error handling if the key or value is not present.

Secure the endpoint if necessary.


Acceptance Criteria:

[ ] Endpoint is accessible and returns configuration in the specified JSON format.

[ ] Key name is fetched dynamically from the DB.

[ ] Proper logging and exception handling are in place.

[ ] Unit and integration tests are added.

[ ] API documentation is updated if required.


Impact Area:

Engine Configuration Service

API Controller Layer

Configuration DB Access


Assignee:
[Assign as needed]

Priority:
[Set as appropriate – e.g., High/Medium]


---

Would you like to include authentication or role-based access control for this endpoint?



Here’s a professional Jira ticket description for your request:


---

Title:
Refactoring - Create Role Using Naming Convention ENGINE_VIEW_ROLE

Type:
Refactor / Backend Enhancement

Description:
Refactor the role creation logic to introduce a new role named ENGINE_VIEW_ROLE, adhering to the standard naming conventions for role identifiers.

Objective:

Maintain consistent naming conventions for system roles.

Ensure the new role is properly registered, persisted, and available for assignment within the system.


Scope of Work:

Create a new role with the name ENGINE_VIEW_ROLE.

Follow the existing role creation pattern and align with naming standards (uppercase with underscores).

Add the role to default role enumeration/configuration if applicable.

Ensure the role is available in any role management UI or API.

Add test cases to verify role creation and retrieval.


Acceptance Criteria:

[ ] Role ENGINE_VIEW_ROLE is created and saved in the system.

[ ] Naming conventions are strictly followed.

[ ] The role is visible and assignable in the system.

[ ] All relevant tests are updated or added.

[ ] No regression issues in role management modules.


Impact Area:

Role Service / Role Entity

Role initialization scripts or configurations

Related role management UI or APIs


Assignee:
[Assign as needed]

Priority:
[Set as appropriate – e.g., Medium]


---

Would you like this in Jira Markdown format or include it in a user story format?



Here’s a detailed and professional Jira ticket description for your requirement:


---

Title:
Modify TCT Backend to Use Single DB (Disable Multitenancy via Config)

Type:
Refactor / Configuration Update

Description:
Refactor the TCT backend to use a single database instead of the current multi-tenant setup. If feasible, disable multitenancy through a configuration switch. Retain and comment out the existing multitenancy code for potential future use, as discussed with Shyam.

Objective:

Simplify the backend setup by switching to a single DB mode.

Ensure flexibility to re-enable multitenancy in the future if required.


Scope of Work:

Introduce a configuration flag to control multitenancy enablement.

When multitenancy is disabled, route all operations to the default single database instance.

Comment out multitenancy-related code blocks without deletion for future reference.

Ensure no impact on existing functionality.

Test application behavior with both single DB and multitenancy modes.


Acceptance Criteria:

[ ] A config property is introduced to enable/disable multitenancy.

[ ] When disabled, the system operates with a single database instance.

[ ] All multitenancy logic is safely commented with clear annotations.

[ ] Application runs without errors in single DB mode.

[ ] Changes verified and confirmed with Shyam.

[ ] All related test cases are updated accordingly.


Impact Area:

Configuration files

Tenant resolution/interceptor logic

Repository/data access layer


Assignee:
[Assign as needed]

Priority:
[Set based on sprint planning – e.g., Medium/High]


---

Would you like this converted into Jira Markdown format as well?



Here’s a professional and complete Jira ticket description based on your input:


---

Title:
Refactoring - Create Organization with Default Team

Type:
Refactor / Enhancement

Description:
This task involves refactoring the existing Create Organization functionality to ensure that a default team is automatically created whenever a new organization is added to the system.

Objective:

Simplify onboarding by ensuring every organization has at least one team by default.

Improve data consistency and avoid edge cases where an organization exists without a team.


Scope of Work:

Modify the organization creation flow to include the creation of a default team (e.g., “Default Team” or configurable name).

Ensure transactional consistency: if default team creation fails, the organization creation should be rolled back.

Add appropriate unit and integration tests.

Update API documentation if applicable.


Acceptance Criteria:

[ ] Organization creation API returns success only if default team is also created.

[ ] Default team appears under the newly created organization in the system.

[ ] Unit tests for successful and failed team creation scenarios are added.

[ ] Code follows project-level coding standards and passes code review.


Impact Area:

Organization Service / Team Service

Database schema (if any changes are required)


Assignee:
[Assign as needed]

Priority:
[Set as per team standards – e.g., Medium/High]


---

Would you like this in Jira Markdown format too?



Before starting development on this ticket, the following details are required:

API endpoint and request payload details for invoking the push notification service.


Additionally, the following prerequisite tickets need to be completed before proceeding with this work:

Ticket No. 1

Ticket No. 2


Kindly provide the necessary information and complete the dependencies to unblock this ticket.


Here’s your corrected and professional version of the paragraph:


---

This update is related to creating secrets using our TCT tool.
Currently, we have the flexibility to update the region configuration, and based on the selected region, the tool will create the secret in that region.

This change will not impact the existing secrets unless a new region is explicitly provided.
For local development, the application can use this variable to run properly.

In the existing ECS service, the DevOps team can configure and update this variable value as needed for the application.


---

Would you also like a slightly more concise version depending on where you're planning to use it (e.g., Jira ticket, email, Confluence)?





